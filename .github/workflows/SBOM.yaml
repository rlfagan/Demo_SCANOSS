name: SCANOSS SBOM SCANNER

on:
  push:
    branches:
      - '*'

jobs:
  generate-sbom:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the source code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Login to Docker (if needed)
      - name: Log in to GitHub Docker Registry
        if: env.DOCKER_AUTH_REQUIRED == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Step 3: Run SCANOSS in Docker to generate SBOM
      - name: Generate SBOM using SCANOSS Docker
        run: |
          docker pull ghcr.io/scanoss/scanoss-py:v1.19.0  # Ensure the image is pulled
          docker run --rm -v $(pwd):/scanoss ghcr.io/scanoss/scanoss-py:v1.19.0 scan ./ -i sbom.json -o results.json

      # Step 4: Upload the generated SBOM as an artifact
      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Results
          path: ./results.json
    #Generate Charts
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Install Python dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install matplotlib pandas

      # Step 3: Generate charts from SCANOSS SBOM results
      - name: Generate Charts
        run: |
          mkdir -p charts
          python scripts/generate_charts.py

      # Step 4: Embed charts in the workflow summary as base64 images
      - name: Display Charts in Workflow Summary
        run: |
          echo "## SCANOSS SBOM Report ðŸ“Š" >> $GITHUB_STEP_SUMMARY
          echo "### License Distribution" >> $GITHUB_STEP_SUMMARY
          echo "![License Distribution](data:image/png;base64,$(base64 -w 0 charts/license_distribution.png))" >> $GITHUB_STEP_SUMMARY
          echo "### Component Usage" >> $GITHUB_STEP_SUMMARY
          echo "![Component Usage](data:image/png;base64,$(base64 -w 0 charts/component_distribution.png))" >> $GITHUB_STEP_SUMMARY
          echo "### Cryptographic Algorithm Usage" >> $GITHUB_STEP_SUMMARY
          echo "![Cryptographic Algorithm Usage](data:image/png;base64,$(base64 -w 0 charts/crypto_algorithm_usage.png))" >> $GITHUB_STEP_SUMMARY
